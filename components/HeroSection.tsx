'use client'

import { useEffect, useRef, useState } from 'react'
import { motion } from 'framer-motion'
import { ChevronDown } from 'lucide-react'

export default function HeroSection() {
  const videoRef = useRef<HTMLVideoElement>(null)
  const [isMobile, setIsMobile] = useState(false)

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  useEffect(() => {
    const checkMobile = () => {
      const mobile = window.innerWidth <= 768
      setIsMobile(mobile)
      console.log('üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', mobile ? '–ú–æ–±–∏–ª—å–Ω–æ–µ' : '–î–µ—Å–∫—Ç–æ–ø')
    }
    
    checkMobile()
    window.addEventListener('resize', checkMobile)
    return () => window.removeEventListener('resize', checkMobile)
  }, [])

  useEffect(() => {
    const video = videoRef.current
    if (!video) return

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ src –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ JavaScript (–æ–±—Ö–æ–¥ iOS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
    const videoSrc = isMobile 
      ? '/videos/hero-background-mobile.mp4'
      : '/videos/hero-background.mp4'
    
    video.src = videoSrc
    video.muted = true
    video.playsInline = true
    video.defaultMuted = true
    video.volume = 0
    video.loop = true
    ;(video as any).webkitPlaysInline = true

    let hasPlayed = false

    // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–ø–ª–µ—è
    const attemptPlay = async () => {
      if (hasPlayed) return
      
      try {
        await video.play()
        hasPlayed = true
        console.log('‚úÖ –í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ')
      } catch (err) {
        console.log('‚ö†Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      }
    }

    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
    video.addEventListener('loadedmetadata', attemptPlay)
    video.addEventListener('loadeddata', attemptPlay)
    video.addEventListener('canplay', attemptPlay)
    
    // –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    const timers = [
      setTimeout(attemptPlay, 100),
      setTimeout(attemptPlay, 500),
      setTimeout(attemptPlay, 1000),
    ]

    // IntersectionObserver - –∑–∞–ø—É—Å–∫ –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0]?.isIntersecting) {
          attemptPlay()
        }
      },
      { threshold: 0.25 }
    )
    observer.observe(video)

    // –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –õ–Æ–ë–û–ú –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º (—Å–∫—Ä–æ–ª–ª, —Ç–∞–ø, –∫–ª–∏–∫)
    const playOnAnyInteraction = () => {
      attemptPlay()
    }
    
    // –°–ª—É—à–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    document.addEventListener('touchstart', playOnAnyInteraction, { once: true, passive: true })
    document.addEventListener('touchmove', playOnAnyInteraction, { once: true, passive: true })
    document.addEventListener('scroll', playOnAnyInteraction, { once: true, passive: true })
    document.addEventListener('click', playOnAnyInteraction, { once: true })

    return () => {
      video.removeEventListener('loadedmetadata', attemptPlay)
      video.removeEventListener('loadeddata', attemptPlay)
      video.removeEventListener('canplay', attemptPlay)
      timers.forEach(clearTimeout)
      observer.disconnect()
      document.removeEventListener('touchstart', playOnAnyInteraction)
      document.removeEventListener('touchmove', playOnAnyInteraction)
      document.removeEventListener('scroll', playOnAnyInteraction)
      document.removeEventListener('click', playOnAnyInteraction)
    }
  }, [isMobile])

  return (
    <section className="relative min-h-screen flex items-center justify-center overflow-hidden">
      {/* Hero Background Video */}
      <div className="absolute inset-0">
        {/* Background Video */}
        <video
          ref={videoRef}
          className="absolute inset-0 w-full h-full object-cover"
          style={{ backgroundColor: '#000' }}
          autoPlay
          muted
          playsInline
          loop
          preload="auto"
          webkit-playsinline="true"
          disablePictureInPicture
        >
          {/* Src —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ JavaScript –≤ useEffect */}
        </video>
        {/* Dark Overlay for text readability */}
        <div className="absolute inset-0 bg-gradient-to-b from-black/70 via-black/60 to-black/70"></div>
        {/* Optional accent overlay */}
        <div className="absolute inset-0 bg-primary-900/20"></div>
      </div>

      {/* Content */}
      <div className="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
        >
          <motion.div
            className="mb-8"
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2, duration: 0.8 }}
          >
            <div className="flex justify-center">
              <img
                src="/images/hardcase-logo.png"
                alt="HARD CASE"
                className="w-full max-w-2xl h-auto"
              />
            </div>
          </motion.div>

          <motion.p
            className="text-primary-400 text-lg sm:text-xl font-light tracking-wide uppercase mb-6"
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3, duration: 0.8 }}
          >
            advanced recovery training
          </motion.p>

          <motion.h2
            className="text-2xl sm:text-3xl md:text-4xl font-semibold text-white/90 mb-8"
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4, duration: 0.8 }}
          >
            –≠–∫—Å–ø–µ—Ä—Ç—ã –≤ —Å–∏–ª–æ–≤–æ–º —Ç—Ä–µ–Ω–∏–Ω–≥–µ
          </motion.h2>

          <motion.p
            className="text-xl sm:text-2xl text-white/90 max-w-3xl mx-auto mb-12 font-light leading-relaxed"
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.6, duration: 0.8 }}
          >
            –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ü–µ–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ –Ω–∞—É–∫—É, –æ–ø—ã—Ç –∏ —Å–∏–ª—É.
          </motion.p>

          <motion.div
            className="flex flex-col sm:flex-row gap-4 justify-center items-center"
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.8, duration: 0.8 }}
          >
            <motion.a
              href="#contact"
              className="bg-primary-500 text-white px-8 py-4 rounded-full font-semibold text-lg hover:bg-primary-600 transition-colors shadow-lg"
              whileHover={{ scale: 1.05, boxShadow: '0 20px 60px rgba(251, 146, 60, 0.4)' }}
              whileTap={{ scale: 0.95 }}
            >
              –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            </motion.a>
            <motion.a
              href="#team"
              className="border-2 border-white text-white px-8 py-4 rounded-full font-semibold text-lg hover:bg-white hover:text-gray-900 transition-colors"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ
            </motion.a>
          </motion.div>
        </motion.div>
      </div>

      {/* Scroll Indicator */}
      <motion.div
        className="absolute bottom-8 left-1/2 transform -translate-x-1/2"
        animate={{ y: [0, 10, 0] }}
        transition={{ duration: 2, repeat: Infinity }}
      >
        <ChevronDown className="text-white/60" size={40} />
      </motion.div>
    </section>
  )
}

